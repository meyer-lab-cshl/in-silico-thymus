var documenterSearchIndex = {"docs":
[{"location":"instructions/#Instructions-to-run-ThymusABM.jl","page":"Instructions","title":"Instructions to run ThymusABM.jl","text":"","category":"section"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"Install Julia v1.7.2 following instructions here","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"More useful download information","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"Additional useful information on getting started can be found here","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"With git installed, clone the ThymusABM.jl project in a directory of your choice by typing the following in the terminal:","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"git clone https://github.com/meyer-lab-cshl/ThymusABM.jl.git","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"Login to Elzar to download a necessary stage_genes_peptides_intlists.json data file. This can be done by typing the following in the terminal, and then entering your password:","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"ssh username@bamdev1","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"Type the following in the terminal to navigate to the directory containing the file:","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"cd /grid/meyer/home/mulle","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"Type the following to copy the data file to the data directory in the ThymusABM project directory (replace username@localmachine with your username and address on your local machine and replace /path/to/ with the preceding path to the ThymusABM directory):","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"scp stage_genes_peptides_intlists.json username@localmachine:/path/to/ThymusABM/data","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"Navigate to the ThymusABM project directory on your local machine and type julia into the terminal","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"With Julia running, press ] to enter pkg mode and type:","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"(v1.7) pkg> activate .\n\n(ThymusABM) pkg> instantiate","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"To run, navigate to the ThymusABM project directory and type in the terminal: ","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"julia --threads 1 --project=. src/ThymusABM.jl","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"This will take approximately 5 minutes to run, with the current step being printed out after every 100 steps. Upon successful simulation completion, the following message will be printed: \"Simulation complete. Data written to ThymusABM/data folder as adf4600thymocytes7threshold10synapsecomplexes1rngseed.csv and mdf4600thymocytes7threshold10synapsecomplexes1rngseed.csv\" along with the time taken to run.","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"There should now be an adf4600thymocytes7threshold10synapsecomplexes1rngseed.csv and a mdf4600thymocytes7threshold10synapsecomplexes1rngseed.csv file in the ThymusABM/data/results folder that holds collected data for agent-related parameters and model-related parameters, respectively. The first few lines of adf.csv should be as follows:","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"step count_tec countcheckstage1tec countcheckstage2tec countcheckstage3tec countcheckstage4tec countcheckstage5tec countcheckstage6tec countcheckstage7tec countcheckstage8tec countcheckstage9tec\n0 956 83 117 105 105 108 127 117 88 106\n1 956 101 91 112 105 108 112 124 113 90\n2 956 104 88 109 109 106 113 120 118 89\n3 956 103 89 110 108 107 113 120 117 89\n4 956 104 89 108 111 104 113 122 116 89","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"The first few lines of mdf.csv should be as follows:","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"step num_tregs autoreactive_thymocytes escaped_thymocytes nonautoreactive_thymocytes alive_thymocytes escape_ratio react_ratio nonreact_ratio threshold total_thy alive_ratio escapedautoreactive_ratio model_volume\n0 0 0 0 0 4600 NaN NaN NaN 7 4600 Inf NaN 0.001\n1 0 0 0 40 4600 0 0 1 7 4640 115 NaN 0.001\n2 0 1 0 80 4600 0 0.012345679012345 0.987654320987654 7 4681 56.7901234567901 0 0.001\n3 0 3 0 108 4600 0 0.027027027027027 0.972972972972973 7 4711 41.4414414414414 0 0.001\n4 0 5 0 128 4600 0 0.037593984962406 0.962406015037594 7 4733 34.5864661654135 0 0.001","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"The parameters that can be configured in config.toml for the ABM are listed below.","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"steps\n    How long to run the ABM for\n    Type: Int\n    Example: 1000\nvolume\n    Volume of ABM environment (mm^3)\n    Type: Float64\n    Example: 0.001\nnum_medullas\n    Number of medullas to simulate (amount of simulations to run at once)\n    Type: Int\n    Example: 5\nselection_threshold\n    Threshold that a thymocyte's binding strength to a peptide needs to match or exceed to be negatively selected\n    Type: Int\n    Example: 7\ntreg_threshold\n    Threshold for a thymocyte to be classified as a Treg after it successfully exits the thymus without being negatively selected\n    Type: Int\n    Example: 6\nthymocyte_speed\n    Spped that the thymocytes will travel at\n    Type: Int16\n    Example: 0.015\nrng\n    Array of random number generator seeds to use (the length of this array should be equal to num_medullas)\n    Type: Array of Ints\n    Example: [1, 2, 3, 4, 5]\nsynapse_interactions\n    Amount of reactions to calculate for one interaction between APC and thymocyte\n    Type: Int\n    Example: 10\nminimum_strength\n    Minimum strength needed in one pMHC:TCR binding to ensure the peptide is remembered by the thymocyte\n    Type: Int\n    Example: 2\nmatrixtype\n    Type of matrix to use to calculate binding strengths\n    Type: String\n    Example: \"hamming\"","category":"page"},{"location":"introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Assumptions:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Constant population of all cell types maintained\nThymocytes either die by negative selection, or leave the thymus after a certain number of interactions\nmTECs die and are replaced by a new mTEC after a certain number of interactions\nmTECs/DCs can interact with multiple thymocytes at once\nmTECs remain stationary\nDCs are motile\nThymocytes are motile\nTCR:pMHC binding strength is calculated by comparing their strings through generated binding matrices\nIf number of complexes parameter is >1, the reaction strengths for each complex are summed and then compared to negative selection threshold\nmTECs go through a development process as they have more interactions, which changes the genes expressed and peptides presented\nThymocytes each have a randomly generated TCR\nDCs copy the presented peptides of any mTEC that they interact with","category":"page"},{"location":"#ThymusABM.jl-Documentation","page":"Home","title":"ThymusABM.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [ThymusABM]","category":"page"},{"location":"#ThymusABM.Dendritic","page":"Home","title":"ThymusABM.Dendritic","text":"Dendritic\nid::Int                             # Unique ID to identify agent\npos::NTuple{3,Float64}              # 2D position of agent\nvel::NTuple{3,Float64}              # 2D velocity of agent\nmass::Float64                       # Mass of agent to use in collisions\ntype::Symbol                        # Cell type of agent\ncolor::String                       # Color used for agent in videos\nsize::Float64                       # Size of agent in videos\nnum_interactions::Int               # Total number of interactions agent has\nantigens::Array                     # List of antigens the Dendritic agent contains\nsteps_alive::Int                    # Number of steps the Dendritic agent has been alive for\n\nDendritic agent struct.\n\n\n\n\n\n","category":"type"},{"location":"#ThymusABM.Parameters","page":"Home","title":"ThymusABM.Parameters","text":"Parameters\nwidth_height::NTuple{3,Float64} = width_height                          # 3-Tuple of Float64 for 3 dimensions of the simulation (x, y, z)\nspeed::Float64 = speed                                                  # Float64 speed factor\ndt::Float64 = dt                                                        # Float64 of time step governing movement/velocity of agents\nn_tecs::Int = n_tecs                                                    # Int of number of mTECs to have in simulation\nn_thymocytes::Int = n_thymocytes                                        # Int of number of thymocytes to have in simulation\nn_dendritics::Int = n_dendritics                                        # Int of number of DCs to have in simulation\nthreshold::Int = threshold                                              # Int of negative selection threshold of thymocytes\npeptides::Array = peptides                                              # Array of all possible peptides a mTEC/DC can present\ntcrs::Array = tcrs                                                      # Array of generated TCRs for thymocyte to randomly select from\nsuccessful_interactions::Int = successful_interactions                  # Int of number of times a thymocyte was selected in an interaction with mTEC/DC\nunsuccessful_interactions::Int = unsuccessful_interactions              # Int of number of times a thymocyte was not selected in an interaction with mTEC/DC\nescaped_thymocytes::Int = 0                                             # Int of number of thymocytes that were not negatively selected that should have been\nautoreactive_thymocytes::Int = 0                                        # Int of number of thymocytes that were negatively selected or escaped\nnonautoreactive_thymocytes::Int = 0                                     # Int of number of thymocytes that were not autoreactive and can be assumed to have successfully exited the thymus\ntotal_thymocytes::Int = 0                                               # Int of total number of thymocytes that have entered simulation\ntreg_threshold::Int = treg_threshold                                    # Float64 setting the threshold for a nonautoreactive thymocyte to be classified as a Treg\nnum_tregs::Int = 0                                                      # Int of total number of Tregs that have successfully exited simulation\ntecs_present::Int = n_tecs                                              # Int of number of mTECs currently present in the simulation\naa_matrix::NamedArray = aa_matrix                                       # NamedArray containing all possible interaction strengths between peptides and tcrs\nsynapse_interactions::Int = synapse_interactions                        # Int of total number of peptide:TCR reactions to calculate for one thymocyte:mTEC/DC interaction\ndeaths::Int = deaths                                                    # Int of total number of thymocytes that have exited simulation for any reason at current step\ntotal_dead_thymocytes::Int = total_dead_thymocytes                      # Int of total number of thymocytes that have exited simulation for any reason across all steps\nalive_thymocytes::Int = alive_thymocytes                                # Int of total number of alive thymocytes at current step\nstage_genes_peptides_dict::Vector{Any} = stage_genes_peptides_dict      # Vector holding the development stage information for mTECs (genes and corresponding peptides for each stage)\nmax_tec_interactions::Int = max_tec_interactions                        # Int of maximum number of interactions a mTEC can have before it \"dies\" and is replaced by a new one\nmax_thymocyte_interactions::Int = max_thymocyte_interactions            # Int of maximum number of interactions a thymocyte must have before it leaves as a nonautoreactive T cell\nstep::Int = 0                                                           # Int of current step of simulation\nmtec_genes::Int = mtec_genes                                            # Int of number of genes mtec will express\nmtec_peptides::Int = mtec_peptides                                      # Int of number of peptides mtec will present from its genes\n\nParameters struct.\n\n\n\n\n\n","category":"type"},{"location":"#ThymusABM.Tec","page":"Home","title":"ThymusABM.Tec","text":"Tec\nid::Int                             # Unique ID to identify agent\npos::NTuple{3,Float64}              # 2D position of agent\nvel::NTuple{3,Float64}              # 2D velocity of agent\nmass::Float64                       # Mass of agent to use in collisions\ntype::Symbol                        # Cell type of agent\ncolor::String                       # Color used for agent in videos\nsize::Float64                       # Size of agent in videos\nnum_interactions::Int               # Total number of interactions agent has\nantigens::Array                     # List of antigens the Tec agent contains\nstage::Int                          # Maturation stage of Tec\nsteps_alive::Int                    # Number of steps the Tec agent has been alive for\n\nTec agent struct.\n\n\n\n\n\n","category":"type"},{"location":"#ThymusABM.Thymocyte","page":"Home","title":"ThymusABM.Thymocyte","text":"Thymocyte\nid::Int                             # Unique ID to identify agent\npos::NTuple{3,Float64}              # 2D position of agent\nvel::NTuple{3,Float64}              # 2D velocity of agent\nmass::Float64                       # Mass of agent to use in collisions\ntype::Symbol                        # Cell type of agent\ncolor::String                       # Color used for agent in videos\nsize::Float64                       # Size of agent in videos\nnum_interactions::Int               # Total number of interactions agent has\ntcr::String                         # TCR that the thymocyte agent is carrying\nreaction_levels::Dict               # Dict to hold thymocyte's seen antigens and reaction levels to them\ndeath_label::Bool                   # Label a thymocyte to be killed on its next step\nconfined::Bool                      # Boolean if the thymocyte has been confined by an APC\nbind_location::NTuple{3,Float64}    # Location of binding w/ APC that led to confinement\ntreg::Bool                          # Boolean if thymocyte meets Treg threshold or not\nsteps_alive::Int                    # Number of steps the Thymocyte agent has been alive for\n\nThymocyte agent struct.\n\n\n\n\n\n","category":"type"},{"location":"#ThymusABM.add_dendritics!-Tuple{Any, Int64, String, Float64}","page":"Home","title":"ThymusABM.add_dendritics!","text":"add_dendritics!(model, n_dendritics, color, size)\n\nAdds n_dendritics number of Dendritics to the model of given color and size.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.add_tecs!-Tuple{Any, Int64, String, Float64, Bool}","page":"Home","title":"ThymusABM.add_tecs!","text":"add_tecs!(model, n_tecs, color, size, replenishing)\n\nAdds n_tecs number of Tecs to the model of given color and size. Boolean replenishing determines if Tec is an initial Tec (true), or added to the model later on (false).\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.add_thymocytes!-Tuple{Any, Int64, String, Float64, Bool}","page":"Home","title":"ThymusABM.add_thymocytes!","text":"add_thymocytes!(model, n_thymocytes, color, size, initial)\n\nAdds n_thymocytes number of Thymocytes to the model of given color and size. Boolean initial determines if Thymocyte is an initial Thymocyte (true), or added to the model later on (false).\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.agent_peptides_encountered-Tuple{Any}","page":"Home","title":"ThymusABM.agent_peptides_encountered","text":"agent_peptides_encountered(agent)\n\nReturn the number of peptides that agent has encountered.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.alive_ratio-Tuple{Any}","page":"Home","title":"ThymusABM.alive_ratio","text":"alive_ratio(model)\n\nReturn the proportion of alive thymocytes to exited and dead thymocytes in the model.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.cell_colors-Tuple{Any}","page":"Home","title":"ThymusABM.cell_colors","text":"cell_colors(a)\n\nReturn the color of the given agent a.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.cell_markers-Tuple{Union{Dendritic, Tec, Thymocyte}}","page":"Home","title":"ThymusABM.cell_markers","text":"cell_markers(a)\n\nReturn the marker of the given agent a.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.cell_move!-Tuple{Union{Dendritic, Tec, Thymocyte}, Any}","page":"Home","title":"ThymusABM.cell_move!","text":"cell_move!(agent::Union{Tec, Dendritic, Thymocyte}, model)\n\nMove the given agent of the model according to its type.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.cell_sizes-Tuple{Any}","page":"Home","title":"ThymusABM.cell_sizes","text":"cell_sizes(a)\n\nReturn the size of the given agent a.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.collide!-Tuple{Agents.AbstractAgent, Agents.AbstractAgent}","page":"Home","title":"ThymusABM.collide!","text":"collide!(a::AbstractAgent, b::AbstractAgent)\n\nCalculates an elastic collision between two agents, a and b, when they collide with each other. Adapted from Agents.jl elastic_collision and modified to work for 3D animations.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.escape_ratio-Tuple{Any}","page":"Home","title":"ThymusABM.escape_ratio","text":"escape_ratio(model)\n\nReturn the proportion of exited and dead thymocytes that escaped in the model.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.escapedautoreactive_ratio-Tuple{Any}","page":"Home","title":"ThymusABM.escapedautoreactive_ratio","text":"escapedautoreactive_ratio(model)\n\nReturn the proportion of autoreactive thymocytes that escaped in the model.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.initialize-Tuple{}","page":"Home","title":"ThymusABM.initialize","text":"initialize(;\n    width_height = (1.0, 1.0, 1.0),\n    speed = 0.002,\n    n_tecs = 50,\n    n_thymocytes = 1000,\n    n_dendritics = 50,\n    dt=1.0,\n    threshold = 0.8,\n    treg_threshold = 0.6,\n    rng_seed = 1,\n    synapse_interactions = 1,\n    max_tec_interactions = 200,\n    max_thymocyte_interactions = 80,\n    mtec_genes = 100,\n    mtec_peptides = 100,\n    min_strength = 2,\n    matrix_type = \"hamming\")\n\nInitialize the model with default or specified parameters. Returns the initialized model.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.model_step!-Tuple{Any}","page":"Home","title":"ThymusABM.model_step!","text":"model_step!(model)\n\nSteps the model one step forward. Calculates all agent interactions for the given step. Determines when an agent leaves due to age and adds new agent to replenish it.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.model_volume-Tuple{Any}","page":"Home","title":"ThymusABM.model_volume","text":"model_volume(model)\n\nReturn the volume of the model.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.nonreact_ratio-Tuple{Any}","page":"Home","title":"ThymusABM.nonreact_ratio","text":"nonreact_ratio(model)\n\nReturn the proportion of exited and dead thymocytes that were non-autoreactive in the model.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.react_ratio-Tuple{Any}","page":"Home","title":"ThymusABM.react_ratio","text":"react_ratio(model)\n\nReturn the proportion of exited and dead thymocytes that were autoreactive in the model.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.read_parameters-Tuple{String}","page":"Home","title":"ThymusABM.read_parameters","text":"read_parameters(filename::String)\n\nObtain and return the model parameters from the config file named filename.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.run-Tuple{}","page":"Home","title":"ThymusABM.run","text":"run()\n\nRun the model.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.set_color!-Tuple{Union{Dendritic, Tec, Thymocyte}, Any}","page":"Home","title":"ThymusABM.set_color!","text":"set_color!(agent::Union{Tec, Dendritic, Thymocyte}, model)\n\nSet the color of the given agent of the model according to its type.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.tec-Tuple{Any}","page":"Home","title":"ThymusABM.tec","text":"tec(a)\n\nUsed to check if agent a is a Tec.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.tec_DC_interact!-Tuple{Union{Dendritic, Tec, Thymocyte}, Union{Dendritic, Tec, Thymocyte}}","page":"Home","title":"ThymusABM.tec_DC_interact!","text":"tec_DC_interact!(a1::Union{Tec, Dendritic, Thymocyte}, a2::Union{Tec, Dendritic, Thymocyte})\n\nGoverns the interaction between a Tec and Dendritic who come into contact. Transfers Tec antigens to Dendritic antigens.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.thymocyte-Tuple{Any}","page":"Home","title":"ThymusABM.thymocyte","text":"thymocyte(a)\n\nUsed to check if agent a is a Thymocyte.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.thymocyte_APC_interact!-Tuple{Union{Dendritic, Tec, Thymocyte}, Union{Dendritic, Tec, Thymocyte}, Any}","page":"Home","title":"ThymusABM.thymocyte_APC_interact!","text":"thymocyte_APC_interact!(a1::Union{Tec, Dendritic, Thymocyte}, a2::Union{Tec, Dendritic, Thymocyte}, model)\n\nGoverns the interaction between a Thymocyte and Tec (or Dendritic) of the model who come into contact. Calculates Thymocyte TCR binding affinity to one of Tec or Dendritic's peptides.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.total_thy-Tuple{Any}","page":"Home","title":"ThymusABM.total_thy","text":"total_thy(model)\n\nReturn the total number of dead, exited, and alive thymocytes by end of simulation of the model.\n\n\n\n\n\n","category":"method"},{"location":"#ThymusABM.update_tec_stage-Tuple{Any, Any}","page":"Home","title":"ThymusABM.update_tec_stage","text":"update_tec_stage(tec, model)\n\nUpdates the development stage of the given Tec agent tec of the model according to how many interactions with Thymocytes it has had so far.\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
